// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UserRepositories Renders UserRepositories correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <UserRepositories />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <button
          className="btn btn-primary repositories__button"
          onClick={[Function]}
          type="button"
        >
           
          <i
            className="fas fa-arrow-circle-left"
          />
           Back to Home 
        </button>,
        <form
          className="repositories__filter"
          id="filterContainer"
          onSubmit={[Function]}
        >
          <div
            className="form-group inputContainer filter__container"
          >
            <input
              className="form-control inputContainer__text filter__container__input"
              id="txtSearch"
              name="search"
              onChange={[Function]}
              onFocus={[Function]}
              placeholder="Search by Name"
              type="text"
            />
            <span
              className="filter__container__icon"
              id="searchIcon"
            >
              <i
                className="fas fa-search"
              />
            </span>
          </div>
        </form>,
        <ForwardRef(render)
          className="repositories__table"
          id="reposTable"
          responsive={true}
        >
          <thead>
            <tr>
              <th>
                #
              </th>
              <th
                onClick={[Function]}
              >
                Name
              </th>
              <th
                onClick={[Function]}
              >
                Description
              </th>
              <th
                onClick={[Function]}
              >
                Language
              </th>
              <th
                onClick={[Function]}
              >
                Default Branch
              </th>
              <th
                onClick={[Function]}
              >
                Git Url
              </th>
            </tr>
          </thead>
          <tbody>
            <tr>
              <td
                colSpan="6"
              >
                <ForwardRef
                  closeLabel="Close alert"
                  id="messageTable"
                  show={true}
                  transition={[Function]}
                  variant="info"
                >
                  <p
                    className="message"
                  >
                    <i
                      className="fas fa-info-circle"
                    />
                     Repos not Found! 
                  </p>
                  <p
                    className="messageIcon"
                  >
                    <span
                      aria-label="Emoji"
                      aria-labelledby="emojiImg"
                      role="img"
                    >
                      ðŸ˜¥
                    </span>
                  </p>
                </ForwardRef>
              </td>
            </tr>
          </tbody>
        </ForwardRef(render)>,
        false,
      ],
      "className": "repositories",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            " ",
            <i
              className="fas fa-arrow-circle-left"
            />,
            " Back to Home ",
          ],
          "className": "btn btn-primary repositories__button",
          "onClick": [Function],
          "type": "button",
        },
        "ref": null,
        "rendered": Array [
          " ",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fas fa-arrow-circle-left",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          " Back to Home ",
        ],
        "type": "button",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="form-group inputContainer filter__container"
          >
            <input
              className="form-control inputContainer__text filter__container__input"
              id="txtSearch"
              name="search"
              onChange={[Function]}
              onFocus={[Function]}
              placeholder="Search by Name"
              type="text"
            />
            <span
              className="filter__container__icon"
              id="searchIcon"
            >
              <i
                className="fas fa-search"
              />
            </span>
          </div>,
          "className": "repositories__filter",
          "id": "filterContainer",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <input
                className="form-control inputContainer__text filter__container__input"
                id="txtSearch"
                name="search"
                onChange={[Function]}
                onFocus={[Function]}
                placeholder="Search by Name"
                type="text"
              />,
              <span
                className="filter__container__icon"
                id="searchIcon"
              >
                <i
                  className="fas fa-search"
                />
              </span>,
            ],
            "className": "form-group inputContainer filter__container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "form-control inputContainer__text filter__container__input",
                "id": "txtSearch",
                "name": "search",
                "onChange": [Function],
                "onFocus": [Function],
                "placeholder": "Search by Name",
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <i
                  className="fas fa-search"
                />,
                "className": "filter__container__icon",
                "id": "searchIcon",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "fas fa-search",
                },
                "ref": null,
                "rendered": null,
                "type": "i",
              },
              "type": "span",
            },
          ],
          "type": "div",
        },
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <thead>
              <tr>
                <th>
                  #
                </th>
                <th
                  onClick={[Function]}
                >
                  Name
                </th>
                <th
                  onClick={[Function]}
                >
                  Description
                </th>
                <th
                  onClick={[Function]}
                >
                  Language
                </th>
                <th
                  onClick={[Function]}
                >
                  Default Branch
                </th>
                <th
                  onClick={[Function]}
                >
                  Git Url
                </th>
              </tr>
            </thead>,
            <tbody>
              <tr>
                <td
                  colSpan="6"
                >
                  <ForwardRef
                    closeLabel="Close alert"
                    id="messageTable"
                    show={true}
                    transition={[Function]}
                    variant="info"
                  >
                    <p
                      className="message"
                    >
                      <i
                        className="fas fa-info-circle"
                      />
                       Repos not Found! 
                    </p>
                    <p
                      className="messageIcon"
                    >
                      <span
                        aria-label="Emoji"
                        aria-labelledby="emojiImg"
                        role="img"
                      >
                        ðŸ˜¥
                      </span>
                    </p>
                  </ForwardRef>
                </td>
              </tr>
            </tbody>,
          ],
          "className": "repositories__table",
          "id": "reposTable",
          "responsive": true,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <tr>
                <th>
                  #
                </th>
                <th
                  onClick={[Function]}
                >
                  Name
                </th>
                <th
                  onClick={[Function]}
                >
                  Description
                </th>
                <th
                  onClick={[Function]}
                >
                  Language
                </th>
                <th
                  onClick={[Function]}
                >
                  Default Branch
                </th>
                <th
                  onClick={[Function]}
                >
                  Git Url
                </th>
              </tr>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <th>
                    #
                  </th>,
                  <th
                    onClick={[Function]}
                  >
                    Name
                  </th>,
                  <th
                    onClick={[Function]}
                  >
                    Description
                  </th>,
                  <th
                    onClick={[Function]}
                  >
                    Language
                  </th>,
                  <th
                    onClick={[Function]}
                  >
                    Default Branch
                  </th>,
                  <th
                    onClick={[Function]}
                  >
                    Git Url
                  </th>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "#",
                  },
                  "ref": null,
                  "rendered": "#",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Name",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Name",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Description",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Description",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Language",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Language",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Default Branch",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Default Branch",
                  "type": "th",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Git Url",
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": "Git Url",
                  "type": "th",
                },
              ],
              "type": "tr",
            },
            "type": "thead",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <tr>
                <td
                  colSpan="6"
                >
                  <ForwardRef
                    closeLabel="Close alert"
                    id="messageTable"
                    show={true}
                    transition={[Function]}
                    variant="info"
                  >
                    <p
                      className="message"
                    >
                      <i
                        className="fas fa-info-circle"
                      />
                       Repos not Found! 
                    </p>
                    <p
                      className="messageIcon"
                    >
                      <span
                        aria-label="Emoji"
                        aria-labelledby="emojiImg"
                        role="img"
                      >
                        ðŸ˜¥
                      </span>
                    </p>
                  </ForwardRef>
                </td>
              </tr>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <td
                  colSpan="6"
                >
                  <ForwardRef
                    closeLabel="Close alert"
                    id="messageTable"
                    show={true}
                    transition={[Function]}
                    variant="info"
                  >
                    <p
                      className="message"
                    >
                      <i
                        className="fas fa-info-circle"
                      />
                       Repos not Found! 
                    </p>
                    <p
                      className="messageIcon"
                    >
                      <span
                        aria-label="Emoji"
                        aria-labelledby="emojiImg"
                        role="img"
                      >
                        ðŸ˜¥
                      </span>
                    </p>
                  </ForwardRef>
                </td>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <ForwardRef
                    closeLabel="Close alert"
                    id="messageTable"
                    show={true}
                    transition={[Function]}
                    variant="info"
                  >
                    <p
                      className="message"
                    >
                      <i
                        className="fas fa-info-circle"
                      />
                       Repos not Found! 
                    </p>
                    <p
                      className="messageIcon"
                    >
                      <span
                        aria-label="Emoji"
                        aria-labelledby="emojiImg"
                        role="img"
                      >
                        ðŸ˜¥
                      </span>
                    </p>
                  </ForwardRef>,
                  "colSpan": "6",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      <p
                        className="message"
                      >
                        <i
                          className="fas fa-info-circle"
                        />
                         Repos not Found! 
                      </p>,
                      <p
                        className="messageIcon"
                      >
                        <span
                          aria-label="Emoji"
                          aria-labelledby="emojiImg"
                          role="img"
                        >
                          ðŸ˜¥
                        </span>
                      </p>,
                    ],
                    "closeLabel": "Close alert",
                    "id": "messageTable",
                    "show": true,
                    "transition": [Function],
                    "variant": "info",
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": Array [
                          <i
                            className="fas fa-info-circle"
                          />,
                          " Repos not Found! ",
                        ],
                        "className": "message",
                      },
                      "ref": null,
                      "rendered": Array [
                        Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "className": "fas fa-info-circle",
                          },
                          "ref": null,
                          "rendered": null,
                          "type": "i",
                        },
                        " Repos not Found! ",
                      ],
                      "type": "p",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": <span
                          aria-label="Emoji"
                          aria-labelledby="emojiImg"
                          role="img"
                        >
                          ðŸ˜¥
                        </span>,
                        "className": "messageIcon",
                      },
                      "ref": null,
                      "rendered": Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "aria-label": "Emoji",
                          "aria-labelledby": "emojiImg",
                          "children": "ðŸ˜¥",
                          "role": "img",
                        },
                        "ref": null,
                        "rendered": "ðŸ˜¥",
                        "type": "span",
                      },
                      "type": "p",
                    },
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Heading": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "defaultProps": undefined,
                      "displayName": "AlertHeading",
                      "render": [Function],
                    },
                    "Link": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "defaultProps": undefined,
                      "displayName": "AlertLink",
                      "render": [Function],
                    },
                    "defaultProps": Object {
                      "closeLabel": "Close alert",
                      "show": true,
                      "transition": [Function],
                    },
                    "displayName": "Alert",
                    "render": [Function],
                  },
                },
                "type": "td",
              },
              "type": "tr",
            },
            "type": "tbody",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "defaultProps": undefined,
          "displayName": "Bootstrap(Table)",
          "propTypes": undefined,
          "render": [Function],
        },
      },
      false,
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <button
            className="btn btn-primary repositories__button"
            onClick={[Function]}
            type="button"
          >
             
            <i
              className="fas fa-arrow-circle-left"
            />
             Back to Home 
          </button>,
          <form
            className="repositories__filter"
            id="filterContainer"
            onSubmit={[Function]}
          >
            <div
              className="form-group inputContainer filter__container"
            >
              <input
                className="form-control inputContainer__text filter__container__input"
                id="txtSearch"
                name="search"
                onChange={[Function]}
                onFocus={[Function]}
                placeholder="Search by Name"
                type="text"
              />
              <span
                className="filter__container__icon"
                id="searchIcon"
              >
                <i
                  className="fas fa-search"
                />
              </span>
            </div>
          </form>,
          <ForwardRef(render)
            className="repositories__table"
            id="reposTable"
            responsive={true}
          >
            <thead>
              <tr>
                <th>
                  #
                </th>
                <th
                  onClick={[Function]}
                >
                  Name
                </th>
                <th
                  onClick={[Function]}
                >
                  Description
                </th>
                <th
                  onClick={[Function]}
                >
                  Language
                </th>
                <th
                  onClick={[Function]}
                >
                  Default Branch
                </th>
                <th
                  onClick={[Function]}
                >
                  Git Url
                </th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td
                  colSpan="6"
                >
                  <ForwardRef
                    closeLabel="Close alert"
                    id="messageTable"
                    show={true}
                    transition={[Function]}
                    variant="info"
                  >
                    <p
                      className="message"
                    >
                      <i
                        className="fas fa-info-circle"
                      />
                       Repos not Found! 
                    </p>
                    <p
                      className="messageIcon"
                    >
                      <span
                        aria-label="Emoji"
                        aria-labelledby="emojiImg"
                        role="img"
                      >
                        ðŸ˜¥
                      </span>
                    </p>
                  </ForwardRef>
                </td>
              </tr>
            </tbody>
          </ForwardRef(render)>,
          false,
        ],
        "className": "repositories",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              " ",
              <i
                className="fas fa-arrow-circle-left"
              />,
              " Back to Home ",
            ],
            "className": "btn btn-primary repositories__button",
            "onClick": [Function],
            "type": "button",
          },
          "ref": null,
          "rendered": Array [
            " ",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "fas fa-arrow-circle-left",
              },
              "ref": null,
              "rendered": null,
              "type": "i",
            },
            " Back to Home ",
          ],
          "type": "button",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="form-group inputContainer filter__container"
            >
              <input
                className="form-control inputContainer__text filter__container__input"
                id="txtSearch"
                name="search"
                onChange={[Function]}
                onFocus={[Function]}
                placeholder="Search by Name"
                type="text"
              />
              <span
                className="filter__container__icon"
                id="searchIcon"
              >
                <i
                  className="fas fa-search"
                />
              </span>
            </div>,
            "className": "repositories__filter",
            "id": "filterContainer",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <input
                  className="form-control inputContainer__text filter__container__input"
                  id="txtSearch"
                  name="search"
                  onChange={[Function]}
                  onFocus={[Function]}
                  placeholder="Search by Name"
                  type="text"
                />,
                <span
                  className="filter__container__icon"
                  id="searchIcon"
                >
                  <i
                    className="fas fa-search"
                  />
                </span>,
              ],
              "className": "form-group inputContainer filter__container",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "className": "form-control inputContainer__text filter__container__input",
                  "id": "txtSearch",
                  "name": "search",
                  "onChange": [Function],
                  "onFocus": [Function],
                  "placeholder": "Search by Name",
                  "type": "text",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <i
                    className="fas fa-search"
                  />,
                  "className": "filter__container__icon",
                  "id": "searchIcon",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "className": "fas fa-search",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "i",
                },
                "type": "span",
              },
            ],
            "type": "div",
          },
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <thead>
                <tr>
                  <th>
                    #
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Name
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Description
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Language
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Default Branch
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Git Url
                  </th>
                </tr>
              </thead>,
              <tbody>
                <tr>
                  <td
                    colSpan="6"
                  >
                    <ForwardRef
                      closeLabel="Close alert"
                      id="messageTable"
                      show={true}
                      transition={[Function]}
                      variant="info"
                    >
                      <p
                        className="message"
                      >
                        <i
                          className="fas fa-info-circle"
                        />
                         Repos not Found! 
                      </p>
                      <p
                        className="messageIcon"
                      >
                        <span
                          aria-label="Emoji"
                          aria-labelledby="emojiImg"
                          role="img"
                        >
                          ðŸ˜¥
                        </span>
                      </p>
                    </ForwardRef>
                  </td>
                </tr>
              </tbody>,
            ],
            "className": "repositories__table",
            "id": "reposTable",
            "responsive": true,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <tr>
                  <th>
                    #
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Name
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Description
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Language
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Default Branch
                  </th>
                  <th
                    onClick={[Function]}
                  >
                    Git Url
                  </th>
                </tr>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <th>
                      #
                    </th>,
                    <th
                      onClick={[Function]}
                    >
                      Name
                    </th>,
                    <th
                      onClick={[Function]}
                    >
                      Description
                    </th>,
                    <th
                      onClick={[Function]}
                    >
                      Language
                    </th>,
                    <th
                      onClick={[Function]}
                    >
                      Default Branch
                    </th>,
                    <th
                      onClick={[Function]}
                    >
                      Git Url
                    </th>,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "#",
                    },
                    "ref": null,
                    "rendered": "#",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Name",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Name",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Description",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Description",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Language",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Language",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Default Branch",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Default Branch",
                    "type": "th",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "Git Url",
                      "onClick": [Function],
                    },
                    "ref": null,
                    "rendered": "Git Url",
                    "type": "th",
                  },
                ],
                "type": "tr",
              },
              "type": "thead",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <tr>
                  <td
                    colSpan="6"
                  >
                    <ForwardRef
                      closeLabel="Close alert"
                      id="messageTable"
                      show={true}
                      transition={[Function]}
                      variant="info"
                    >
                      <p
                        className="message"
                      >
                        <i
                          className="fas fa-info-circle"
                        />
                         Repos not Found! 
                      </p>
                      <p
                        className="messageIcon"
                      >
                        <span
                          aria-label="Emoji"
                          aria-labelledby="emojiImg"
                          role="img"
                        >
                          ðŸ˜¥
                        </span>
                      </p>
                    </ForwardRef>
                  </td>
                </tr>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": <td
                    colSpan="6"
                  >
                    <ForwardRef
                      closeLabel="Close alert"
                      id="messageTable"
                      show={true}
                      transition={[Function]}
                      variant="info"
                    >
                      <p
                        className="message"
                      >
                        <i
                          className="fas fa-info-circle"
                        />
                         Repos not Found! 
                      </p>
                      <p
                        className="messageIcon"
                      >
                        <span
                          aria-label="Emoji"
                          aria-labelledby="emojiImg"
                          role="img"
                        >
                          ðŸ˜¥
                        </span>
                      </p>
                    </ForwardRef>
                  </td>,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": <ForwardRef
                      closeLabel="Close alert"
                      id="messageTable"
                      show={true}
                      transition={[Function]}
                      variant="info"
                    >
                      <p
                        className="message"
                      >
                        <i
                          className="fas fa-info-circle"
                        />
                         Repos not Found! 
                      </p>
                      <p
                        className="messageIcon"
                      >
                        <span
                          aria-label="Emoji"
                          aria-labelledby="emojiImg"
                          role="img"
                        >
                          ðŸ˜¥
                        </span>
                      </p>
                    </ForwardRef>,
                    "colSpan": "6",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "children": Array [
                        <p
                          className="message"
                        >
                          <i
                            className="fas fa-info-circle"
                          />
                           Repos not Found! 
                        </p>,
                        <p
                          className="messageIcon"
                        >
                          <span
                            aria-label="Emoji"
                            aria-labelledby="emojiImg"
                            role="img"
                          >
                            ðŸ˜¥
                          </span>
                        </p>,
                      ],
                      "closeLabel": "Close alert",
                      "id": "messageTable",
                      "show": true,
                      "transition": [Function],
                      "variant": "info",
                    },
                    "ref": null,
                    "rendered": Array [
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": Array [
                            <i
                              className="fas fa-info-circle"
                            />,
                            " Repos not Found! ",
                          ],
                          "className": "message",
                        },
                        "ref": null,
                        "rendered": Array [
                          Object {
                            "instance": null,
                            "key": undefined,
                            "nodeType": "host",
                            "props": Object {
                              "className": "fas fa-info-circle",
                            },
                            "ref": null,
                            "rendered": null,
                            "type": "i",
                          },
                          " Repos not Found! ",
                        ],
                        "type": "p",
                      },
                      Object {
                        "instance": null,
                        "key": undefined,
                        "nodeType": "host",
                        "props": Object {
                          "children": <span
                            aria-label="Emoji"
                            aria-labelledby="emojiImg"
                            role="img"
                          >
                            ðŸ˜¥
                          </span>,
                          "className": "messageIcon",
                        },
                        "ref": null,
                        "rendered": Object {
                          "instance": null,
                          "key": undefined,
                          "nodeType": "host",
                          "props": Object {
                            "aria-label": "Emoji",
                            "aria-labelledby": "emojiImg",
                            "children": "ðŸ˜¥",
                            "role": "img",
                          },
                          "ref": null,
                          "rendered": "ðŸ˜¥",
                          "type": "span",
                        },
                        "type": "p",
                      },
                    ],
                    "type": Object {
                      "$$typeof": Symbol(react.forward_ref),
                      "Heading": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "defaultProps": undefined,
                        "displayName": "AlertHeading",
                        "render": [Function],
                      },
                      "Link": Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "defaultProps": undefined,
                        "displayName": "AlertLink",
                        "render": [Function],
                      },
                      "defaultProps": Object {
                        "closeLabel": "Close alert",
                        "show": true,
                        "transition": [Function],
                      },
                      "displayName": "Alert",
                      "render": [Function],
                    },
                  },
                  "type": "td",
                },
                "type": "tr",
              },
              "type": "tbody",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "displayName": "Bootstrap(Table)",
            "propTypes": undefined,
            "render": [Function],
          },
        },
        false,
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
